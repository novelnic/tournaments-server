{"version":3,"sources":["utils/score.js","components/NavbarComponent.jsx","components/TournamentListItemComponent.jsx","services/TournamentService.js","components/TournamentListComponent.jsx","components/HomePageComponent.jsx","services/TeamService.js","services/MatchService.js","components/MatchCardComponent.jsx","components/TeamCardComponent.jsx","components/TournamentDetailComponent.jsx","components/Tournaments.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","matches","scores","forEach","match","score","kills","players","reduce","acc","player","placementPts","place","placement","push","sort","a","b","slice","NavbarComponent","className","to","React","Component","TournamentListItemComponent","props","state","tournament","tour","this","startTime","Date","now","setUTCSeconds","toLocaleTimeString","timeZone","hour","minute","endTime","_id","name","teams","length","axios","defaults","baseURL","get","id","TournamentListComponent","tournaments","TournamentService","then","actualTournaments","setState","data","map","key","HomePageComponent","tournamentId","params","MatchCardComponent","matchId","MatchService","totKills","Card","bg","Header","computeScore","Body","Row","username","TeamCardComponent","team","Accordion","Toggle","as","eventKey","Collapse","TournamentDetailComponent","tId","tourn","TeamService","Promise","all","Tournaments","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44be02f6.chunk.js","sourcesContent":["const computeScore = matches => {\r\n  let score = 0;\r\n  let scores = [];\r\n  matches.forEach(match => {\r\n    if (!match) return 0;\r\n    let score = 0;\r\n    let kills =\r\n      (match.players &&\r\n        match.players.reduce((acc, player) => (acc += player.kills), 0)) ||\r\n      0;\r\n    let placementPts = 0;\r\n    let place = match.placement;\r\n    switch (true) {\r\n      case place === 1:\r\n        placementPts = 25;\r\n        break;\r\n      case place === 2:\r\n        placementPts = 20;\r\n        break;\r\n      case place === 3:\r\n        placementPts = 15;\r\n        break;\r\n      case place === 4:\r\n        placementPts = 10;\r\n        break;\r\n      case place <= 7:\r\n        placementPts = 7;\r\n        break;\r\n      case place <= 10:\r\n        placementPts = 4;\r\n        break;\r\n      case place <= 15:\r\n        placementPts = 2;\r\n        break;\r\n      case place <= 20:\r\n        placementPts = 1;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    score = placementPts + kills;\r\n    scores.push(score);\r\n  });\r\n\r\n  score = scores\r\n    .sort((a, b) => b - a)\r\n    .slice(0, 3)\r\n    .reduce((acc, score) => (acc += score), 0);\r\n\r\n  return score;\r\n};\r\n\r\nmodule.exports = computeScore;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavbarComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav className='navbar navbar-dark bg-dark'>\r\n        <Link className='navbar-brand' to='/'>\r\n          Jup Null Tournaments\r\n        </Link>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarComponent;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nclass TournamentListItemComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { tournament: props.tournament };\r\n  }\r\n\r\n  render() {\r\n    let tour = this.state.tournament;\r\n    let currTime = Date.now() / 1000;\r\n    let startTime = new Date(0);\r\n    startTime.setUTCSeconds(tour.startTime);\r\n    startTime = startTime.toLocaleTimeString('en-US', {\r\n      timeZone: 'America/New_York',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n    let endTime = new Date(0);\r\n    endTime.setUTCSeconds(tour.endTime);\r\n    endTime = endTime.toLocaleTimeString('en-US', {\r\n      timeZone: 'America/New_York',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n    return (\r\n      <Link\r\n        to={'/tournaments/' + tour._id}\r\n        className='list-group-item list-group-item-dark d-flex align-items-center justify-content-between'\r\n      >\r\n        <h5>{tour.name}</h5>\r\n        <h5>{tour.teams.length} Teams Registered</h5>\r\n        <h5>\r\n          {startTime} - {endTime}\r\n        </h5>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TournamentListItemComponent;\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = '';\r\n\r\nexport default {\r\n  getTournaments: () => axios.get('/api/tournaments'),\r\n  getTournament: id => axios.get('/api/tournaments/' + id),\r\n  deleteTournament: id => axios.delete('/api/tournaments/' + id),\r\n  saveTournament: tournamentData =>\r\n    axios.post('/api/tournaments', tournamentData),\r\n};\r\n","import React from 'react';\r\nimport TournamentListItemComponent from './TournamentListItemComponent';\r\nimport TournamentService from '../services/TournamentService';\r\n\r\nclass TournamentListComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { tournaments: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    TournamentService.getTournaments().then(actualTournaments =>\r\n      this.setState({ tournaments: actualTournaments.data })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 className='text-center'>Current Tournaments</h2>\r\n        <ul className='list-group'>\r\n          {this.state.tournaments &&\r\n            this.state.tournaments.map(tournament => (\r\n              <TournamentListItemComponent\r\n                key={tournament._id}\r\n                tournament={tournament}\r\n              />\r\n            ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TournamentListComponent;\r\n","import React from 'react';\r\nimport NavbarComponent from './NavbarComponent';\r\nimport TournamentListComponent from './TournamentListComponent';\r\n\r\nclass HomePageComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavbarComponent />\r\n        <div className='container'>\r\n          <TournamentListComponent />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePageComponent;\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n  getTeams: () => axios.get('/api/teams'),\r\n  getTeamScore: id => axios.get(`/api/teams/${id}/score`),\r\n  getTeam: id => axios.get('/api/teams/' + id),\r\n  deleteTeam: id => axios.delete('/api/teams/' + id),\r\n  saveTeam: teamData => axios.post('/api/teams', teamData),\r\n  findTeamsByTournament: tournamentId =>\r\n    axios.get('/api/teams', { params: { tournamentId } }),\r\n};\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n  getMatches: () => axios.get('/api/matches'),\r\n  getMatch: id => axios.get('/api/matches/' + id),\r\n};\r\n","import React from 'react';\r\nimport { Card, Row } from 'react-bootstrap';\r\nimport MatchService from '../services/MatchService';\r\nimport computeScore from '../utils/score';\r\n\r\nclass MatchCardComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      match: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let matchId = this.props.matchId;\r\n    MatchService.getMatch(matchId).then(({ data: match }) => {\r\n      this.setState({ match });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let players = this.state.match && this.state.match.players;\r\n    let totKills =\r\n      players && players.reduce((acc, player) => (acc += player.kills), 0);\r\n    return (\r\n      <Card bg='secondary'>\r\n        <Card.Header className='d-flex justify-content-between align-items-center'>\r\n          <h6>{computeScore([this.state.match])} points</h6>\r\n          <h6>{totKills} Kills</h6>\r\n          <h6>Placement: {this.state.match && this.state.match.placement}</h6>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {players &&\r\n            players.map(player => {\r\n              return (\r\n                <Row\r\n                  key={player.username}\r\n                  className='justify-content-between align-items-center'\r\n                >\r\n                  <h6>{player.username}</h6>\r\n                  <h6>{player.kills} Kills</h6>\r\n                </Row>\r\n              );\r\n            })}\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MatchCardComponent;\r\n","import React from 'react';\r\nimport { Accordion, Card, Row } from 'react-bootstrap';\r\nimport MatchCardComponent from './MatchCardComponent';\r\nclass TeamCardComponent extends React.Component {\r\n  render() {\r\n    const team = this.props.team;\r\n    return (\r\n      <Accordion>\r\n        <Card bg='dark'>\r\n          <Accordion.Toggle as={Card.Header} eventKey='0'>\r\n            <Row className='align-items-center justify-content-between'>\r\n              <h5>{team.name}</h5>\r\n              <h5>Score: {team.score}</h5>\r\n            </Row>\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey='0'>\r\n            <Card.Body>\r\n              {team.matches.map(matchId => (\r\n                <MatchCardComponent key={matchId} matchId={matchId} />\r\n              ))}\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TeamCardComponent;\r\n","import React from 'react';\r\nimport NavbarComponent from './NavbarComponent';\r\nimport TournamentService from '../services/TournamentService';\r\nimport TeamService from '../services/TeamService';\r\nimport TeamCardComponent from './TeamCardComponent';\r\n\r\nclass TournamentDetailComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tournament: {},\r\n      teams: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let tId = this.props.match.params.tournamentId;\r\n    TournamentService.getTournament(tId).then(({ data: tourn }) => {\r\n      TeamService.findTeamsByTournament(tourn._id).then(\r\n        async ({ data: teams }) => {\r\n          teams = await Promise.all(\r\n            teams.map(async team => {\r\n              return await TeamService.getTeamScore(team._id).then(\r\n                ({ data: score }) => {\r\n                  return { ...team, score };\r\n                }\r\n              );\r\n            })\r\n          );\r\n          this.setState({ tournament: tourn, teams: teams });\r\n        }\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavbarComponent />\r\n        <div className='container'>\r\n          <h1 className={'text-center'}>{this.state.tournament.name}</h1>\r\n          {this.state.teams\r\n            .sort((a, b) => b - a)\r\n            .map(team => (\r\n              <TeamCardComponent key={team._id} team={team} />\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TournamentDetailComponent;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport HomePageComponent from './HomePageComponent';\r\nimport TournamentDetailComponent from './TournamentDetailComponent';\r\n\r\nclass Tournaments extends React.Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div>\r\n          <Route path='/' exact={true} component={HomePageComponent} />\r\n          <Route\r\n            path='/tournaments/:tournamentId'\r\n            exact={true}\r\n            component={TournamentDetailComponent}\r\n          />\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tournaments;\r\n","import React from 'react';\nimport './App.css';\nimport Tournaments from './components/Tournaments';\n\nfunction App() {\n  return <Tournaments />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}